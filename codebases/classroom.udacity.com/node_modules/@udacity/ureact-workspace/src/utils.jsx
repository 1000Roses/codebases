import {v4 as uuidv4} from 'uuid';

export const SUPPORT_REQ_LINK = 'https://udacity.zendesk.com/hc/en-us/requests/new';

export const debounce = (wait, opts) => (target, name, descriptor) => {
  const method = descriptor.value;
  descriptor.value = _.debounce(method, wait, opts);
};

export function shortId(len) {
  if (!len) { len = 5;}
  return (
    [...Array(len)]
    .map(() => (Math.floor(Math.random() * 36)) /* integer [0..35] */
      .toString(36) /* base36 encoded: [0-9a-z], {0:'0', 35:'z'} */
    )
    .join('')
  );
}

export function invalidNameError(name) {
  name = String(name);

  if (!name || name.match(/^\w+( \w+)*$/)) {
    return null; // valid
  }
  if (name.match(/^ /)) {
    return `Name: "${name}" may not start with a space.`;
  }
  if (name.match(/ $/)) {
    return `Name: "${name}" may not have a trailing space.`;
  }
  if (name.match(/  /)) {
    return `Name: "${name}" may only have one space between words.`;
  }
  if (name.match(/-/)) {
    return `Name: "${name}" may not contain any dashes.`;
  }

  return `The name: "${name}" may only include the chars: a-z, A-Z, 0-9,
          underscores, and spaces between words.`;
}

// provisionerId is a unique key for nebula to partially identify a vm.
// It is formatted to be a uuid without the dashes.
// Nebula does not allow any chars other than (0-9A-Za-z) for this id.
export function generateProvisionerId() {
  return uuidv4().replace(/-/g, '');
}

// viewId sets the scope for redux actions.
// It must be unique per page.
export function generateViewId() {
  return uuidv4();
}

export const RootTypes = {
  NANODEGREE: 'Degree',
  COURSE: 'Course',
  PART: 'Part'
};
