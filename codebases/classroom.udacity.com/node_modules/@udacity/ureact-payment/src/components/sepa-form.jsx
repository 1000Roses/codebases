import _                    from 'lodash';
import React, {Component}   from 'react';
import PropTypes            from 'prop-types';
import IBAN                 from 'iban';
import {TextInput}          from '@udacity/ureact-components';

import {formTypes}          from '../constants/forms';
import {__}                 from '../helpers/localization';
import formHelper           from '../helpers/form-helper';
import sepaFields           from './sepa-form-fields';

import styles               from './sepa-form.module.scss';

export default class SepaForm extends Component {
  static propTypes = {
    onChange: PropTypes.func.isRequired,
    validateAllFields: PropTypes.bool
  }

  state = {
    bankAccount: _.mapValues(sepaFields, () => ''),
    validation: _.mapValues(sepaFields, () => true),
    valid: false
  }

  componentDidMount() {
    if (this.props.validateAllFields) {
      this.validateAllFields();
    }
    this.props.onChange({
      bankAccount: this.state.bankAccount,
      valid: this.state.valid
    });
  }

  componentDidUpdate(prevProps) {
    if (this.props.validateAllFields && !prevProps.validateAllFields) {
      this.validateAllFields();
    } else if (!this.props.validateAllFields && prevProps.validateAllFields) {
      this.setState({
        validation: _.mapValues(this.state.validation, () => true)
      });
    }
  }

  handleFieldChange = (event) => {
    const name = event.target.name;
    let value = event.target.value;
    if (name === 'accountNumber' && !!value) {
      value = IBAN.printFormat(value);
    }
    // Don't pool the event, because validateField needs to access it later.
    event.persist();
    this.setState({
      bankAccount: {
        ...this.state.bankAccount,
        [name]: value
      }
    }, () => {
      if (this.props.validateAllFields) {
        this.validateField(event);
      }
      this.handleOnChange();
    });
  }

  validateAllFields() {
    const {bankAccount} = this.state;
    const validation = _.mapValues(sepaFields, (val, key) => {
      return formHelper.validateField(formTypes.SEPA, key, bankAccount[key]);
    });
    this.setState({validation}, this.handleOnChange);
  }

  validateField = (event) => {
    const name = event.target.name;
    const value = event.target.value;
    this.setState({
      validation: {
        ...this.state.validation,
        [name]: formHelper.validateField(formTypes.SEPA, name, value)
      }
    }, this.handleOnChange);
  }

  handleOnChange = () => {
    const {bankAccount} = this.state;
    const valid = formHelper.allFieldsValid(formTypes.SEPA, bankAccount);
    this.setState({valid}, () => this.props.onChange({bankAccount, valid}));
  }

  buildFormFields() {
    const {bankAccount, validation} = this.state;
    return _.map(sepaFields, (opts, key) => {
      const valid = validation[key];
      const options = {
        ...opts,
        key,
        name: key,
        className: formHelper.getClassName(valid, opts.type),
        value: bankAccount[key],
        onBlur: (event) => this.validateField(event),
        onChange: (event) => this.handleFieldChange(event)
      };

      delete options.errorMessage;

      return (
        <div className={styles.sepa_form_field} key={key}>
          <TextInput {...options}/>
          {!valid && opts.errorMessage &&
            <div className={styles.error_message}>
              {opts.errorMessage}
            </div>
          }
        </div>
      );
    });
  }

  render() {
    return (
      <div>
        <div className={styles.inputs_container}>
          <div className={styles.input_col}>
            {this.buildFormFields()}

            <blockquote className={styles['mandate']}>
              <p>{__('By providing your IBAN and confirming this payment, you are authorizing Udacity and Stripe, our payment service provider, to send instructions to your bank to debit your account and your bank to debit your account in accordance with those instructions.')}</p>
              <p>{__('You are entitled to a refund from your bank under the terms and conditions of your agreement with your bank. A refund must be claimed within 8 weeks starting from the date on which your account was debited.')}</p>
            </blockquote>
          </div>
        </div>
      </div>
    );
  }
}
