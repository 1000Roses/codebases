import _                  from 'lodash';
import React, {Component} from 'react';
import PropTypes          from 'prop-types';
import Select             from '@udacity/ureact-select';
import TextInput          from '@udacity/ureact-components';

import {__}               from '../helpers/localization';
import dateConstants      from '../constants/dates';

import styles             from './date-field.module.scss';

const validateDate = ({ day, month, year }) => {
  if (!_.isNumber(day) || !_.isNumber(month) || !_.isNumber(year)) {
    return false;
  }
  // some browsers doesn't support date string format like YYYY-MM-DD or YYYY/MM/DD to parse the correct date.
  // Use number to create the valid date.
  // the month number for date object starts from 0. like jan -- 0, feb -- 1.
  const date = new Date(year, month, day);
  // if the date is not valid in this month, for example, Feb-30-2018,
  // the Date library will parse it to next month --> Mar-2-2018.
  // checking whether the month is equal to getMonth + 1 for date validation.
  return date.getMonth() === parseInt(month, 10);
};

const getDays = () => _.map(_.range(1, 32), (d) => ({ value: d, label: d }));

const getMonths = () => dateConstants.MONTHS;

const getYears = () => {
  const maxYear = new Date().getFullYear();
  return _.map(_.range(maxYear, 1899, -1), (year) => ({
    value: year, label: year
  }));
};

export default class DateField extends Component {
  static propTypes = {
    onChange: PropTypes.func.isRequired,
    validateDate: PropTypes.func
  };

  static defaultProps = {
    validateDate,
    years: getYears()
  }

  state = {
    fields: {
      day: null,
      month: null,
      year: null
    },
    valid: true
  };

  handleUpdateDate = (key, value) => {
    this.setState(
      {
        fields: {
          ...this.state.fields,
          [key]: value
        }
      },
      () => {
        const valid = this.props.validateDate(this.state.fields);
        this.setState({ valid });
        this.props.onChange({
          birthDate: this.state.fields,
          valid
        });
      }
    );
  };

  showError() {
    const allFieldsFilled = _.every(
      this.state.fields,
      (field) => !_.isNull(field)
    );
    return allFieldsFilled && !this.state.valid;
  }

  render() {
    const { fields } = this.state;
    const dropdownClass = this.showError()
      ? styles.date_dropdown_error
      : styles.date_dropdown;

    return (
      <div className={styles.dropdown_container}>
        <Select
          className={dropdownClass}
          name="day"
          placeholder={__('Day')}
          value={fields.day}
          clearable={false}
          onChange={(option) => this.handleUpdateDate('day', option.value)}
          options={getDays()}
        />
        <Select
          className={dropdownClass}
          name="month"
          placeholder={__('Month')}
          value={fields.month}
          clearable={false}
          onChange={(option) => this.handleUpdateDate('month', option.value)}
          options={getMonths()}
        />
        <Select
          className={dropdownClass}
          name="year"
          placeholder={__('Year')}
          value={fields.year}
          clearable={false}
          onChange={(option) => this.handleUpdateDate('year', option.value)}
          options={this.props.years}
        />
      </div>
    );
  }
}
