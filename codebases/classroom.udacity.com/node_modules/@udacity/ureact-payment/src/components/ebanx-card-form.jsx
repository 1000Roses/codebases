import _                         from 'lodash';
import React, {Component}        from 'react';
import ReactTooltip              from 'react-tooltip';
import PropTypes                 from 'prop-types';
import Payment                   from 'payment';
import {TextInput}               from '@udacity/ureact-components';
import Select                    from '@udacity/ureact-select';

import {formTypes}               from '../constants/forms';
import {__}                      from '../helpers/localization';
import formHelper                from '../helpers/form-helper';
import BillingDetailsForm        from './ebanx-billing-details-form';
import ebanxBillingDetailsFields from './ebanx-billing-details-form-fields';
import ebanxCardFields           from './ebanx-card-form-fields';

import styles                    from './ebanx-card-form.module.scss';

const DEFAULT_CARD_TYPE = 'default_card';

export default class EbanxCardForm extends Component {
  static propTypes = {
    onChange: PropTypes.func.isRequired,
    validateAllFields: PropTypes.bool,
    priceTier: PropTypes.number,
    country: PropTypes.string,
    region: PropTypes.string,
    city: PropTypes.string,
    line1: PropTypes.string,
    installmentOptions: PropTypes.arrayOf(PropTypes.shape({
      value: PropTypes.number.isRequired,
      label: PropTypes.string.isRequired,
    })).isRequired
  }

  state = {
    card: {
      type: DEFAULT_CARD_TYPE,
      name: '',
      cardNumber: '',
      expiry: '',
      cvc: '',
      ..._.mapValues(ebanxBillingDetailsFields, (value, key) => _.get(this.props, key, '')),
    },
    validation: {
      name: true,
      address: true,
      cardNumber: true,
      cvc: true,
      expiry: true,
      streetNumber: true,
      phoneNumber: true
    },
    valid: false
  }

  componentDidMount() {
    if (this.props.validateAllFields) {
      this.validateAllFields();
    }
    this.props.onChange({
      card: this.state.card,
      valid: this.state.valid
    });
  }

  componentDidUpdate(prevProps) {
    if (this.props.validateAllFields && !prevProps.validateAllFields) {
      this.validateAllFields();
    } else if (!this.props.validateAllFields && prevProps.validateAllFields) {
      this.setState({
        validation: _.mapValues(this.state.validation, () => true)
      });
    }
  }

  handleFieldChange = (key, event) => {
    const value = event.value || event.target.value;
    if (key === 'cardNumber') {
      this.handleCardNumberChange(event);
    } else {
      this.setState({
        card: {
          ...this.state.card,
          [key]: value
        }
      }, () => {
        if (this.props.validateAllFields) {
          this.validateField(key);
        }
        this.handleOnChange();
      });
    }
  }
  handleCardNumberChange = (event) => {
    const cardNumber = event.target.value;
    const type = Payment.fns.cardType(cardNumber) || DEFAULT_CARD_TYPE;

    this.setState({
      card: {
        ...this.state.card,
        cardNumber,
        type,
      }
    }, () => {
      if (this.props.validateAllFields) {
        this.validateField('cardNumber');
      }
      this.handleOnChange();
    });
  }

  handleFieldFocus = (key, event) => {
    switch (key) {
      case 'cardNumber':
        Payment.formatCardNumber(event.target);
        break;
      case 'cvc':
        Payment.formatCardCVC(event.target);
        break;
      case 'expiry':
        Payment.formatCardExpiry(event.target);
        break;
      default:
        break;
    }
  }

  handleBillingInfoChange = (addressProps) => {
    this.setState({
      card: {
        ...this.state.card,
        ...addressProps.fields
      },
      validation: {
        ...this.state.validation,
        address: addressProps.valid
      }
    }, this.handleOnChange);
  }

  handleOnChange = () => {
    const {card} = this.state;
    const valid = formHelper.allFieldsValid(formTypes.EBANX_CARD, card, card.country);
    this.setState({valid}, () => this.props.onChange({card, valid}));
  }

  validateAllFields() {
    const {card} = this.state;
    const validation = this.state.validation;
    _.each(_.keys(ebanxCardFields), key => {
      validation[key] = formHelper.validateField(formTypes.EBANX_CARD, key, card[key], card.country);
    });
    this.setState({
      validation: {
        ...this.state.validation,
        validation
      }
    }, this.handleOnChange);
  }

  validateField(key) {
    const {card, validation} = this.state;
    validation[key] = formHelper.validateField(formTypes.EBANX_CARD, key, card[key], card.country);
    this.setState({validation}, this.handleOnChange);
  }

  buildFormFields() {
    const {card, validation} = this.state;

    return _.mapValues(ebanxCardFields, (opts, key) => {
      let valid = validation[key];
      const props = {
        ...opts,
        name: key,
        className: formHelper.getClassName(valid, opts.type, styles),
        value: card[key],
        onFocus: (e) => this.handleFieldFocus(key, e),
        onChange: (e) => this.handleFieldChange(key, e),
        onBlur: () => this.validateField(key)
      };

      delete props.errorMessage;

      const Component = opts.type === 'text' ? TextInput : Select;

      if (key === 'cardNumber') {
        const brand = card.type.toLowerCase();
        props.className = `${formHelper.getClassName(validation.cardNumber, 'text')}
          ${formHelper.getClassName(validation.cardNumber, brand, styles)}`;
      }

      return (
        <div className={styles[key]}>
          <Component {...props} />
          {!valid && opts.errorMessage &&
            <div className={styles.error_message}>
              {opts.errorMessage}
            </div>
          }
        </div>
      );
    });
  }

  render() {
    const formFields = this.buildFormFields();

    return (
      <div>
        <ReactTooltip effect='solid' />
        <div className={styles.inputs_container}>
          <div className={styles.subheader}>{__('Billing Details')}</div>

          <BillingDetailsForm
            country={this.props.country}
            region={this.props.region}
            city={this.props.city}
            line1={this.props.line1}
            onChange={this.handleBillingInfoChange}
            validateAllFields={this.props.validateAllFields}
          />

          <div className={styles.subheader}>{__('Payment Details')}</div>

          <div className={styles.input_row}>
            {formFields.name}
          </div>

          <div className={styles.input_row}>
            {formFields.cardNumber}
          </div>

          <div className={styles.input_row}>
            {formFields.expiry}

            <div className={styles.cvc_container}>
              <div className={styles.cvc_help_container}>
                {formFields.cvc}

                <div
                  className={styles.help}
                  data-tip={__('3- or 4-digit code on front or back of card')}
                  data-place='top'
                />
              </div>
            </div>
          </div>

          <div className={styles.input_row}>
            {formFields.installments}
          </div>
        </div>
      </div>
    );
  }
}
