import _                  from 'lodash';
import React, {Component} from 'react';
import PropTypes          from 'prop-types';
import MediaQuery         from 'react-responsive';
import Select             from '@udacity/ureact-select';
import {TextInput}        from '@udacity/ureact-components';

import {
  breakpoints,
  formTypes
}                         from '../constants/forms';
import addressFields      from './address-form-fields';
import formHelper         from '../helpers/form-helper';

import styles             from './address-form.module.scss';

export default class AddressForm extends Component {
  static propTypes = {
    onChange: PropTypes.func.isRequired,

    // Optional callback function registered with every field in the address form.
    // Invoked with onBlur(address, event)
    onBlur: PropTypes.func,
    validateAllFields: PropTypes.bool,
    showPhoneNumber: PropTypes.bool,
    disableCountrySelect: PropTypes.bool,
    addressForm: PropTypes.shape({
      city: PropTypes.string,
      country: PropTypes.string,
      line1: PropTypes.string,
      line2: PropTypes.string,
      phoneNumber: PropTypes.string,
      postalCode: PropTypes.string,
      region: PropTypes.string,
      state: PropTypes.string
    })
  }

  static defaultProps = {
    addressForm: {
      address: {}
    },
    disableCountrySelect: false
  }

  constructor(props) {
    super(props);
    if (!_.isEmpty(this.props.addressForm.address)) {
      this.state.address = this.props.addressForm.address;
    }
  }

  state = {
    address: _.mapValues(addressFields, () => ''),
    validation: _.mapValues(addressFields, () => true),
    valid: false
  }

  componentDidMount() {
    if (this.props.validateAllFields) {
      this.validateAllFields();
    }
    this.props.onChange({
      address: this.state.address,
      valid: this.state.valid
    });
  }

  componentDidUpdate(prevProps) {
    if (this.props.validateAllFields && !prevProps.validateAllFields) {
      this.validateAllFields();
    } else if (!this.props.validateAllFields && prevProps.validateAllFields) {
      this.setState({
        validation: _.mapValues(this.state.validation, () => true)
      });
    }
    if (!_.isEqual(prevProps.addressForm.address, this.props.addressForm.address)) {
      this.setState({
        address: this.props.addressForm.address
      });
    }
  }

  buildFormFields() {
    const {address, validation} = this.state;
    const {disableCountrySelect} = this.props;
    return _.mapValues(addressFields, (opts, key) => {
      if (typeof opts === 'function') {
        opts = opts(address.country);
      }
      const Component = opts.type === 'text' ? TextInput : Select;
      const valid = validation[key];
      const options = {
        ...opts,
        name: key,
        className: formHelper.getClassName(valid, opts.type),
        value: address[key],
        onChange: (e) => this.handleFieldChange(key, e),
        onBlur: (e) => this.handleFieldBlur(key, e)
      };

      delete options.errorMessage;

      if (key === 'region' || key === 'postalCode') {
        options.ref = (input) => { this[`${key}_ref`] = input; };
      }
      if (key === 'country') {
        options.disabled = disableCountrySelect;
      }

      return (
        <div className={styles[key]} key={key}>
          <Component {...options} />
          {!valid && opts.errorMessage &&
            <div className={styles.error_message}>
              {opts.errorMessage}
            </div>
          }
        </div>
      );
    });
  }

  buildFormRows = (mobile, formFields) => {
    const desktopFormRows = [['line1', 'line2'], ['city'], ['country', 'region', 'postalCode']];
    const mobileFormRows = [['line1'], ['line2'], ['city', 'postalCode'], ['country'], ['region']];
    const formRows = mobile ? mobileFormRows : desktopFormRows;
    return (
      <div>
        {
          _.map(formRows, (fields, i) => {
            return (
              <div className={styles.input_row} key={`row-${i}`}>
                {_.map(fields, field => {
                  return formFields[field];
                })}
              </div>
            );
          })
        }
      </div>
    );
  }

  validateAllFields() {
    const validation = _.mapValues(addressFields, (val, key) => {
      return this.isFieldValid(key);
    });
    this.setState({validation}, this.handleOnChange);
  }

  validateField = (key) => {
    const valid = this.isFieldValid(key);
    this.setState({
      validation: {
        ...this.state.validation,
        [key]: valid
      }
    }, this.handleOnChange);
  }

  handleFieldChange = (key, event) => {
    const value = event.value || event.target.value;
    const address = {
      ...this.state.address,
      [key]: value
    };

    // Reset the state value if country is updated
    if (key === 'country') {
      address.state = '';
    }

    this.setState({address}, () => {
      if (this.props.validateAllFields) {
        this.validateField(key);
      }
      // Focus on next input after dropdown selections
      if (key === 'country') {
        this.region_ref.focus();
      } else if (key === 'region') {
        this.postalCode_ref.focus();
      }
      this.handleOnChange();
    });
  }

  handleOnChange = () => {
    const {address} = this.state;
    const visibleFields = this.props.showPhoneNumber ?
      address : _.pickBy(address, (value, key) => key !== 'phoneNumber');
    const valid = formHelper.allFieldsValid(formTypes.ADDRESS, visibleFields, address.country);
    this.setState({valid}, () => this.props.onChange({address, valid}));
  }

  handleFieldBlur = (key, event) => {
    const {onBlur} = this.props;
    const {address} = this.state;
    this.validateField(key);
    if (_.isFunction(onBlur)) {
      onBlur(address, event);
    }
  }

  isFieldValid = (key) => {
    const {address} = this.state;
    // Skip phoneNumber field if the form does not display it.
    if (key === 'phoneNumber' && !this.props.showPhoneNumber) {
      return true;
    }
    return formHelper.validateField(formTypes.ADDRESS, key, address[key], address.country);
  }

  render() {
    const {showPhoneNumber} = this.props;
    const formFields = this.buildFormFields();
    const phoneRow = showPhoneNumber
      ? (<div className={styles.input_row}>
         {formFields.phoneNumber}
        </div>)
      : null;

    return (
      <div>
        <div className={styles.inputs_container}>

          <MediaQuery maxDeviceWidth={breakpoints.TABLET}>
            {(matches) => {
              return this.buildFormRows(matches, formFields);
            }}
          </MediaQuery>

          {phoneRow}
        </div>
      </div>
    );
  }
}
