import _                  from 'lodash';
import React, {Component} from 'react';
import ReactTooltip       from 'react-tooltip';
import PropTypes          from 'prop-types';
import Payment            from 'payment';
import {TextInput}        from '@udacity/ureact-components';

import {formTypes}        from '../constants/forms';
import {__}               from '../helpers/localization';
import formHelper         from '../helpers/form-helper';
import AddressForm        from './address-form';
import addressFields      from './address-form-fields';
import creditCardFields   from './credit-card-form-fields';

import styles             from './credit-card-form.module.scss';

const DEFAULT_CARD_TYPE = 'default_card';

export default class CreditCardForm extends Component {

  static propTypes = {
    onChange: PropTypes.func.isRequired,

    // Optional callback function registered with every field in the credit card form.
    // Invoked with onBlur(data, event)
    onBlur: PropTypes.func,

    // Optional callback function registered with every field in the address form.
    // Invoked with onBlur(card, event)
    addressFormOnBlur: PropTypes.func,
    validateAllFields: PropTypes.bool,
    showAddress: PropTypes.bool,
    showPhoneNumber: PropTypes.bool,
    cardForm: PropTypes.shape({
      type: PropTypes.string,
      name: PropTypes.string,
      cardNumber: PropTypes.string,
      expiry: PropTypes.string,
      cvc: PropTypes.string
    })
  }

  static defaultProps = {
    showAddress: true,
    showPhoneNumber: false,
    cardForm: {
      card: {}
    }
  }

  constructor(props) {
    super(props);
    if (!_.isEmpty(this.props.cardForm.card)) {
      this.state.card = this.props.cardForm.card;
      this.state.valid = _.get(this.props, 'cardForm.valid', false);
    }
  }

  state = {
    card: {
      type: DEFAULT_CARD_TYPE,
      name: '',
      cardNumber: '',
      expiry: '',
      cvc: ''
    },
    validation: {
      name: true,
      address: true,
      cardNumber: true,
      cvc: true,
      expiry: true
    },
    valid: false
  }

  componentDidMount() {
    if (this.props.showAddress) {
      this.setState({
        card: {
          ...this.state.card,
          ..._.mapValues(addressFields, () => '')
        }
      });
    } else {
      this.setState({
        validation: {
          ...this.state.validation,
          address: !this.props.showAddress
        }
      });
    }
    if (this.props.validateAllFields) {
      this.validateAllFields();
    }
    this.props.onChange({
      card: this.state.card,
      valid: this.state.valid
    });
  }

  componentDidUpdate(prevProps) {
    if (this.props.validateAllFields && !prevProps.validateAllFields) {
      this.validateAllFields();
    } else if (!this.props.validateAllFields && prevProps.validateAllFields) {
      this.setState({
        validation: _.mapValues(this.state.validation, () => true)
      });
    }
    if (!_.isEqual(prevProps.cardForm.card, this.props.cardForm.card)) {
      this.setState({
        card: this.props.cardForm.card,
        valid: _.get(this.props, 'cardForm.valid', false)
      });
    }
  }

  handleFieldChange = (key, event) => {
    if (key === 'cardNumber') {
      this.handleCardNumberChange(event);
    } else {
      this.setState({
        card: {
          ...this.state.card,
          [event.target.name]: event.target.value
        }
      }, () => {
        if (this.props.validateAllFields) {
          this.validateField(key);
        }
        this.handleOnChange();
      });
    }
  }

  handleFieldBlur = (key, event) => {
    const {onBlur} = this.props;
    const {card} = this.state;
    this.validateField(key);
    if (_.isFunction(onBlur)) {
      onBlur(card, event);
    }
  }

  handleCardNumberChange = (event) => {
    const cardNumber = event.target.value;
    const type = Payment.fns.cardType(cardNumber) || DEFAULT_CARD_TYPE;
    this.setState({
      card: {
        ...this.state.card,
        cardNumber,
        type
      }
    }, () => {
      if (this.props.validateAllFields) {
        this.validateField('cardNumber');
      }
      this.handleOnChange();
    });
  }

  handleFieldFocus = (key, event) => {
    switch (key) {
      case 'cardNumber':
        Payment.formatCardNumber(event.target);
        break;
      case 'cvc':
        Payment.formatCardCVC(event.target);
        break;
      case 'expiry':
        Payment.formatCardExpiry(event.target);
        break;
      default:
        break;
    }
  }

  handleAddressChange = (addressProps) => {
    this.setState({
      card: {
        ...this.state.card,
        ...addressProps.address
      },
      validation: {
        ...this.state.validation,
        address: addressProps.valid
      }
    }, this.handleOnChange);
  }

  handleOnChange = () => {
    const {card} = this.state;
    const visibleFields = this.props.showPhoneNumber ?
      card : _.pickBy(card, (value, key) => key !== 'phoneNumber');
    const valid = formHelper.allFieldsValid(formTypes.CREDIT_CARD, visibleFields, card.country);
    this.setState({valid}, () => this.props.onChange({card, valid}));
  }

  validateAllFields() {
    const {card} = this.state;
    const validation = this.state.validation;
    _.each(_.keys(creditCardFields), key => {
      validation[key] = formHelper.validateField(formTypes.CREDIT_CARD, key, card[key]);
    });
    this.setState({
      validation: {
        ...this.state.validation,
        validation
      }
    }, this.handleOnChange);
  }

  validateField(key) {
    const {card, validation} = this.state;
    validation[key] = formHelper.validateField(formTypes.CREDIT_CARD, key, card[key]);
    this.setState({validation}, this.handleOnChange);
  }

  buildFormFields() {
    const {card, validation} = this.state;

    return _.mapValues(creditCardFields, (opts, key) => {
      let valid = validation[key];
      const options = {
        ...opts,
        name: key,
        className: formHelper.getClassName(valid, opts.type, styles),
        value: card[key],
        onFocus: (e) => this.handleFieldFocus(key, e),
        onChange: (e) => this.handleFieldChange(key, e),
        onBlur: (e) => this.handleFieldBlur(key, e)
      };

      delete options.errorMessage;

      if (key === 'cardNumber') {
        const brand = card.type.toLowerCase();
        options.className = `${formHelper.getClassName(validation.cardNumber, 'text')}
          ${formHelper.getClassName(validation.cardNumber, brand, styles)}`;
      }

      return (
        <div className={styles[key]}>
          <TextInput {...options} />
          {!valid && opts.errorMessage &&
            <div className={styles.error_message}>
              {opts.errorMessage}
            </div>
          }
        </div>
      );
    });
  }

  render() {
    const formFields = this.buildFormFields();
    const { showAddress, cardForm, addressFormOnBlur } = this.props;
    //As card object contains all the fields related to address. So passed whole card details as props.
    const addressForm = {address: cardForm.card};
    return (
      <div>
        <ReactTooltip effect='solid' />
        <div className={styles.inputs_container}>
          {showAddress && (<div>
            <div className={styles.subheader}>{__('Billing Details')}</div>
            <AddressForm
              onChange={this.handleAddressChange}
              onBlur={addressFormOnBlur}
              validateAllFields={this.props.validateAllFields}
              showPhoneNumber={this.props.showPhoneNumber}
              addressForm={addressForm}
            />
          </div>)}

          <div className={styles.subheader}>{__('Payment Details')}</div>

          <div className={styles.input_row}>
            {formFields.name}
          </div>

          <div className={styles.input_row}>
            {formFields.cardNumber}
          </div>

          <div className={styles.input_row}>
            {formFields.expiry}

            <div className={styles.cvc_container}>
              <div className={styles.cvc_help_container}>
                {formFields.cvc}

                <div
                  className={styles.help}
                  data-tip={__('3- or 4-digit code on front or back of card')}
                  data-place='top'
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }
}
