import _ from 'lodash';

const providers = {
    STRIPE: 'stripe',
    CKO: 'cko',
    EBANX_CARD: 'ebanx_card',
};

const REQUIRED_CARD_FIELDS = ['name', 'cardNumber', 'expMonth', 'expYear',
    'cvc', 'line1', 'city', 'country'
];
const REQUIRED_ACCOUNT_FIELDS = ['name', 'accountNumber', 'line1', 'city', 'postalCode'];
const REQUIRED_EBANX_CARD_FIELDS = ['name', 'cardNumber', 'cvc', 'expMonth', 'expYear'];

const formatExpiry = (data) => {
    if (data.expiry) {
        const [expMonth, expYear] = data.expiry.replace(/\s+/g, '').split('/');

        data.expMonth = expMonth;
        data.expYear = expYear;
    }

    return data;
};

const checkRequiredFieldsFor = (provider) => (data) => {
    const requiredFields = {
        [providers.STRIPE]: REQUIRED_CARD_FIELDS,
        [providers.CKO]: REQUIRED_CARD_FIELDS,
        [providers.EBANX_CARD]: REQUIRED_EBANX_CARD_FIELDS,
    }[provider] || REQUIRED_CARD_FIELDS;

    return checkRequiredFields(requiredFields, data)
};

const checkRequiredFields = (requiredFields, data) => {
    const meetsAllRequired = _.chain(requiredFields)
        .map(field => !!data[field])
        .every(Boolean)
        .value();

    return meetsAllRequired;
};

const createEbanxToken = (data) => {
    const yyyy = (data.expYear && data.expYear.length === 2) ? '20' + data.expYear : data.expYear;
    const card = {
        card_name: data.name,
        card_number: data.cardNumber.replace(/\s/g, ""),
        card_due_date: `${data.expMonth}/${yyyy}`,
        card_cvv: data.cvc
    };

    if (!window.EBANX) {
        throw new Error('Ebanx API not initialized');
    }

    return new Promise((resolve, reject) => {
        window.EBANX.card.createToken(card, (response) => {
            if (_.get(response, 'error.err')) {
                reject(response.error.err);
            } else {
                resolve({
                    card_token: _.get(response, 'data.token'),
                    last4: _.get(response, 'data.masked_card_number', '').slice(-4),
                    payment_type_code: _.get(response, 'data.payment_type_code'),
                    name: data.name,
                });
            }
        })
    })
}

const createStripeToken = (data) => {
    const card = {
        name: data.name,
        number: data.cardNumber,
        exp_month: data.expMonth,
        exp_year: data.expYear,
        cvc: data.cvc,
        address_line1: data.line1,
        address_line2: data.line2,
        address_city: data.city,
        address_country: data.country,
        address_state: data.region,
        address_zip: data.postalCode
    };

    if (!window.Stripe) {
        throw new Error('Stripe API not initialized');
    }

    return new Promise((resolve, reject) => {
        window.Stripe.card.createToken(card, (status, response) => {
            if (response.error) {
                reject(response.error);
            } else {
                resolve({
                    card_token: _.get(response, 'id'),
                    name: _.get(response, 'card.name'),
                    last4: _.get(response, 'card.last4'),
                    type: _.get(response, 'card.type')
                });
            }
        });
    });
};

const createCKOToken = (data) => {
    const card = {
        name: data.name,
        number: data.cardNumber,
        expiryMonth: data.expMonth,
        expiryYear: data.expYear,
        cvv: data.cvc
    };

    const billingDetails = {
        addressLine1: data.line1,
        addressLine2: data.line1,
        city: data.city,
        country: data.country,
        state: data.region,
        postcode: data.postalCode
    };

    if (!window.CheckoutKit) {
        throw new Error('CKO (CheckoutKit) API not initialized');
    }

    return new Promise((resolve, reject) => {
        window.CheckoutKit.setBillingDetails(billingDetails);

        window.CheckoutKit.createCardToken(card, result => {
            window.CheckoutKit.setBillingDetails({});
            if (result.id) {
                resolve({
                    card_token: _.get(result, 'id'),
                    name: _.get(result, 'card.name'),
                    last4: _.get(result, 'card.last4'),
                    type: _.get(result, 'card.paymentMethod')
                });
            } else {
                reject(new Error(`CKO API Error: ${result.errorCode} ${result.title}`));
            }
        });
    });
};

export default {
    providers,

    createCardToken(type, cardData) {
        cardData = formatExpiry(cardData);

        if (!checkRequiredFieldsFor(type)(cardData)) {
            throw new Error('Card data missing some required fields');
        }

        switch (type) {
            case providers.STRIPE:
                return createStripeToken(cardData);
            case providers.CKO:
                return createCKOToken(cardData);
            case providers.EBANX_CARD:
                return createEbanxToken(cardData);
            default:
                throw new Error(`Could not find API for ${type} provider`);
        }
    },

    createSepaToken(data) {
        if (!checkRequiredFields(REQUIRED_ACCOUNT_FIELDS, data)) {
            throw new Error('Account data missing some required fields');
        }

        if (!window.Stripe) {
            throw new Error('Stripe API not initialized');
        }

        const accountData = {
            currency: 'eur',
            usage: 'source',
            account_holder_name: data.name,
            account_number: data.accountNumber,
            address_line1: data.line1,
            address_line2: data.line2,
            address_city: data.city,
            address_zip: data.postalCode
        };

        return new Promise((resolve, reject) => {
            window.Stripe.bankAccount.createToken(accountData, (status, response) => {
                if (response.error) {
                    reject(response.error);
                } else {
                    resolve(response.id);
                }
            });
        });
    }
};