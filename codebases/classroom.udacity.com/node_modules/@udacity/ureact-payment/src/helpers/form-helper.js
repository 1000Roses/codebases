import _ from 'lodash';
import Payment from 'payment';
import IBAN from 'iban';
import {
    formTypes
} from '../constants/forms';
import formStyles from '../components/form.module.scss';

const REQUIRES_REGION = ['US', 'BR'];
const REQUIRES_POSTAL = ['US', 'BR', 'AU'];
const REQUIRES_PHONE = ['IN', 'BR'];

const textValidation = (value) => {
    return _.isString(value) && value.length > 0;
};

// Ebanx requires strict numerical street numbers
const brazilStreetNumberValidation = (value) => {
    return /^[0-9]{1,30}$/.test(value);
};

const postalCodeValidation = (formType, value, country) => {
    // SEPA form does not include country, but is one of AT, CH or DE.
    // These 3 countries' postal code fall within the range of 1000 to 99999.
    if (formType === formTypes.SEPA) {
        return /^\d{4,5}$/.test(value);
    }
    switch (country) {
        case 'US':
            return /^\d{5}(?:[-\s]\d{4})?$/.test(value); // Zip+4.
        case 'BR':
            return /^\d{5}(?:\-)?\d{3}$/.test(value); // 99999-999 or 99999999
        default:
            return true;
    }
};

const phoneNumberValidation = (value, country) => {
    switch (country) {
        case 'IN':
            return /^(?:(?:\+|0{0,2})91(\s*[\ -]\s*)?|[0]?)?[789]\d{9}|(\d[ -]?){10}\d$/.test(value);
        case 'BR':
            return /^(?:(?:\(\d{2}\))|(?:\d{2}))\ *\d{4,5}\-?\d{4}$/.test(value) // (99) 99999-9999 or (99) 9999-9999 or any of those without non-numeric characters
        default:
            return true;
    }
};

const cpfRegex = /\d{3}\.?\d{3}\.?\d{3}\-?\d{2}/;

const cpfValidation = (value) => {
    if (!cpfRegex.test(value)) {
        return false;
    }

    const cpfDigits = _.chain(value)
        .replace(/[\.\-]/g, '')
        .map(_.parseInt).value();

    const first9 = _.take(cpfDigits, 9);
    const first10 = _.take(cpfDigits, 10);

    const reduceToChecksum = (acc, val, i) => acc + val[0] * val[1];

    const firstDigitSum = _.chain(first9)
        .zip([10, 9, 8, 7, 6, 5, 4, 3, 2])
        .reduce(reduceToChecksum, 0).value() * 10 % 11;

    const secondDigitSum = _.chain(first10)
        .zip([11, 10, 9, 8, 7, 6, 5, 4, 3, 2])
        .reduce(reduceToChecksum, 0).value() * 10 % 11;

    const checkSum = (result, digit) => {
        result = result === 10 ? 0 : result;
        return result === digit;
    }

    return checkSum(firstDigitSum, cpfDigits[9]) && checkSum(secondDigitSum, cpfDigits[10]);
}

/**
 * Validate a form value.
 * @param formType one of type from form-types
 * @param key
 * @param value
 * @param country country 2 digit country code
 * @return true if the value is valid.
 */
const validateField = (formType, key, value, country = '') => {
    switch (key) {
        case 'cardNumber':
            return Payment.fns.validateCardNumber(value);
        case 'expiry':
            return Payment.fns.validateCardExpiry(value);
        case 'cvc':
            return Payment.fns.validateCardCVC(value);
        case 'accountNumber':
            return IBAN.isValid(value);
        case 'name':
        case 'line1':
        case 'city':
        case 'country':
            return textValidation(value);
        case 'streetNumber': // BR
            return brazilStreetNumberValidation(value);
        case 'cpf': // BR
            return cpfValidation(value);
        case 'region':
            if (_.includes(REQUIRES_REGION, country)) {
                return textValidation(value);
            }
            return true;
        case 'postalCode':
            if (_.includes(REQUIRES_POSTAL, country) || formType === formTypes.SEPA) {
                return postalCodeValidation(formType, value, country);
            }
            return true;
        case 'phoneNumber':
            if (_.includes(REQUIRES_PHONE, country)) {
                return phoneNumberValidation(value, country);
            }
            return true;
        default:
            return true;
    }
};

/**
 * Batch validate multiple form values.
 * @param formType one of type from form-types
 * @param data an object containing keys and values to validate
 * @param country 2 digit country code
 * @return true if all values are valid.
 */
const allFieldsValid = (formType, data, country = '') => {
    return _.chain(data)
        .keys()
        .every(key => {
            if (_.includes(['expMonth', 'expYear'], key)) {
                return validateField(formType, 'expiry', {
                    month: data.expMonth,
                    year: data.expYear
                });
            }
            return validateField(formType, key, data[key], country);
        }, Boolean)
        .value();
};

const getClassName = (valid, type, styles = formStyles) => {
    return `${styles[type]} ${valid ? '' : styles[`${type}_error`]}`;
};

export default {
    allFieldsValid,
    getClassName,
    validateField
}