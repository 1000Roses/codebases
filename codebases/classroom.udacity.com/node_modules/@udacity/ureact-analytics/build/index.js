'use strict';

var CALL_TIMEOUT = 300;

module.exports = {
    init: function init(segmentWriteKey) {
        if (window.analytics) {
            window.analytics.load(segmentWriteKey);
        } else {
            throw new Error('Missing Segment snippet in index.html');
        }
    },
    track: function track(eventName, opts, integrations, callback) {
        return callAndPromisifySegmentFn('track', eventName, opts, integrations, callback);
    },
    page: function page(eventName, opts, integrations, callback) {
        return callAndPromisifySegmentFn('page', eventName, opts, integrations, callback);
    },
    identify: function identify(_ref, callback) {
        var id = _ref.id;
        var email = _ref.email;

        return callAndPromisifySegmentFn('identify', id, {
            email: email
        }, null, callback);
    }
};

/**
 * This promisifies the segment analytics call, which allows using promises instead of the `callback`
 * function (while still supporting the `callback` argument).
 */
function callAndPromisifySegmentFn(segmentFnName, arg0, arg1, arg2, callback) {
    return new Promise(function(resolve, reject) {
        if (!window.analytics) {
            reject(new Error('Missing window.analytics'));
            return;
        }

        var isCompleted = false;

        function complete() {
            if (!isCompleted) {
                isCompleted = true;

                if (_.isFunction(callback)) {
                    callback.apply(this, arguments);
                }

                resolve(arguments);
            }
        }

        window.analytics[segmentFnName](arg0, arg1, arg2, complete);

        // In case the analytics callback is never called (such as when a service like Ghostery stubs
        // out the entire `window.analytics` object to a noop), we'll guarantee to complete after a short
        // timeout
        setTimeout(complete, CALL_TIMEOUT);
    });
}