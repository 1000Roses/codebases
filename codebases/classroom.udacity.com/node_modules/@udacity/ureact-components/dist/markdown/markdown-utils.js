'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.extractMath = extractMath;
exports.replaceMath = replaceMath;
exports.default = renderMarkdownWithMathToHtml;

require('./vendor/highlightjs/highlight.module.scss');

var _highlightjs = require('./vendor/highlightjs');

var _highlightjs2 = _interopRequireDefault(_highlightjs);

var _each2 = require('lodash/each');

var _each3 = _interopRequireDefault(_each2);

var _marked = require('marked');

var _marked2 = _interopRequireDefault(_marked);

var _katex = require('katex');

var _katex2 = _interopRequireDefault(_katex);

var _indexModule = require('./index.module.scss');

var _indexModule2 = _interopRequireDefault(_indexModule);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}

var renderer = new _marked2.default.Renderer();

// Add target '_blank' to all markdown links
renderer.link = function(href, title, text) {
    var link = _marked2.default.Renderer.prototype.link.call(this, href, title, text);
    var linkWithTarget = link.slice(0, 2) + ' target="_blank" ' + link.slice(3);

    return linkWithTarget;
};

// Add 'table' class to tables
renderer.table = function(header, body) {
    return '<div class=' + _indexModule2.default['table-responsive'] + '>' + ('<table class=\'' + (_indexModule2.default['table'] + ' ' + _indexModule2.default['table-striped']) + '\'>\n') + '<thead>\n' + header + '</thead>\n' + '<tbody>\n' + body + '</tbody>\n' + '</table>\n' + '</div>';
};

_marked2.default.setOptions({
    renderer: renderer,
    highlight: function highlight(code, lang) {
        var langSubset;
        if (lang) {
            langSubset = [lang];
        }

        return _highlightjs2.default.highlightAuto(code, langSubset).value;
    }
});

function extractMath(source) {
    var math = {};
    var placeholderMarker = 'KATEX';
    var placeholderCount = 0;

    var storePlaceholder = function storePlaceholder(capture) {
        var displayMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        var nextPlaceholder = placeholderMarker + '-' + placeholderCount++ + '-' + placeholderMarker;
        math[nextPlaceholder] = _katex2.default.renderToString(capture, {
            displayMode: displayMode
        });
        return nextPlaceholder;
    };

    var spanRegex = /\<span +class=['"]mathquill['"]\>([\s\S]+?)\<\/span>/gi;
    var divRegex = /\<div +class=['"]mathquill['"]\>([\s\S]+?)\<\/div>/gi;

    var markdown = source.replace(spanRegex, function(_, capture) {
        return storePlaceholder(capture);
    }).replace(divRegex, function(_, capture) {
        return storePlaceholder(capture, true);
    });

    return {
        math: math,
        markdown: markdown
    };
}

function replaceMath(markdown, math) {
    (0, _each3.default)(math, function(v, k) {
        markdown = markdown.replace(k, v);
    });
    return markdown;
}

function renderMarkdownWithMathToHtml(source, markdownOptions) {
    var _extractMath = extractMath(source),
        math = _extractMath.math,
        markdown = _extractMath.markdown;

    var processedMarkdown = (0, _marked2.default)(markdown, markdownOptions);
    return replaceMath(processedMarkdown, math);
}