'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _createClass = function() {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();

var _class, _temp;

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _markdownUtils = require('./markdown-utils');

var _markdownUtils2 = _interopRequireDefault(_markdownUtils);

var _indexModule = require('./index.module.scss');

var _indexModule2 = _interopRequireDefault(_indexModule);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var Markdown = (_temp = _class = function(_React$Component) {
    _inherits(Markdown, _React$Component);

    function Markdown(props) {
        _classCallCheck(this, Markdown);

        var _this = _possibleConstructorReturn(this, (Markdown.__proto__ || Object.getPrototypeOf(Markdown)).call(this, props));

        _this.state = {
            html: _this.getHtml()
        };
        return _this;
    }

    _createClass(Markdown, [{
        key: 'componentDidUpdate',
        value: function componentDidUpdate(prevProps) {
            if (prevProps.text !== this.props.text) {
                this.setState({
                    html: this.getHtml()
                });
            }
        }
    }, {
        key: 'getHtml',
        value: function getHtml() {
            var _props = this.props,
                options = _props.options,
                text = _props.text,
                onError = _props.onError,
                onSuccess = _props.onSuccess;


            try {
                if (onSuccess) {
                    onSuccess();
                }
                return (0, _markdownUtils2.default)(text || '', options);
            } catch (error) {
                if (onError) {
                    onError(error);
                }
                return text;
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var className = this.props.className;
            var html = this.state.html;


            return _react2.default.createElement('div', {
                className: _indexModule2.default['markdown'] + ' ureact-markdown ' + className,
                dangerouslySetInnerHTML: {
                    __html: html
                }
            });
        }
    }]);

    return Markdown;
}(_react2.default.Component), _class.displayName = 'ureact-markdown', _class.propTypes = {
    className: _propTypes2.default.string,
    text: _propTypes2.default.string,
    options: _propTypes2.default.object,
    onError: _propTypes2.default.func,
    onSuccess: _propTypes2.default.func
}, _class.defaultProps = {
    className: '',
    text: '',
    options: {},
    onError: null,
    onSuccess: null
}, _temp);
exports.default = Markdown;