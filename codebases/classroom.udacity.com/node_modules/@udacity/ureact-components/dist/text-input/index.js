'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
            }
        }
    }
    return target;
};

var _createClass = function() {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();

var _class, _temp;

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _tooltip = require('..//tooltip');

var _tooltip2 = _interopRequireDefault(_tooltip);

var _omit2 = require('lodash/omit');

var _omit3 = _interopRequireDefault(_omit2);

var _indexModule = require('./index.module.scss');

var _indexModule2 = _interopRequireDefault(_indexModule);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var TextInput = (_temp = _class = function(_React$Component) {
    _inherits(TextInput, _React$Component);

    function TextInput(props) {
        _classCallCheck(this, TextInput);

        var _this = _possibleConstructorReturn(this, (TextInput.__proto__ || Object.getPrototypeOf(TextInput)).call(this, props));

        _this.setRef = function(node) {
            _this.inputRef = node;
        };

        _this.inputRef = null;
        return _this;
    }

    _createClass(TextInput, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            if (this.props.isFocus) {
                this.focus();
            }
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(newProps) {
            if (newProps.isFocus && newProps.isFocus !== this.props.isFocus) {
                this.focus();
            }
        }
    }, {
        key: 'getRef',
        value: function getRef() {
            return this.inputRef || {};
        }
    }, {
        key: 'focus',
        value: function focus() {
            this.getRef().focus();
        }
    }, {
        key: 'getValue',
        value: function getValue() {
            return this.getRef().value;
        }
    }, {
        key: '_renderInput',
        value: function _renderInput() {
            var error = this.props.error;


            return _react2.default.createElement('input', _extends({}, (0, _omit3.default)(this.props, ['error', 'info', 'tooltipPlacement', 'isFocus', 'styles']), {
                ref: this.setRef,
                className: _indexModule2.default[error ? 'text-input-error' : 'text-input'] + ' ' + this.props.className
            }));
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                error = _props.error,
                info = _props.info,
                tooltipPlacement = _props.tooltipPlacement;


            if (error || info) {
                return _react2.default.createElement(
                    _tooltip2.default, {
                        placement: tooltipPlacement || 'right',
                        overlay: _react2.default.createElement(
                            'span',
                            null,
                            error || info
                        )
                    },
                    this._renderInput()
                );
            } else {
                return this._renderInput();
            }
        }
    }]);

    return TextInput;
}(_react2.default.Component), _class.propTypes = {
    type: _propTypes2.default.oneOf(['text', 'password', 'email', 'number', 'url']),
    error: _propTypes2.default.string,
    info: _propTypes2.default.string,
    tooltipPlacement: _propTypes2.default.oneOf(['top', 'right', 'bottom', 'left']),
    isFocus: _propTypes2.default.bool
}, _class.defaultProps = {
    type: 'text',
    error: null,
    info: null,
    isFocus: false
}, _temp);
exports.default = TextInput;