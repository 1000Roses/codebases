'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _createClass = function() {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();

var _class, _temp2;

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _indexModule = require('./index.module.scss');

var _indexModule2 = _interopRequireDefault(_indexModule);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

/* A button that will auto-show a busy indicator if the onClick returns a promise */
var Button = (_temp2 = _class = function(_React$Component) {
    _inherits(Button, _React$Component);

    function Button() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, Button);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Button.__proto__ || Object.getPrototypeOf(Button)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            isBusy: _this.props.isBusy
        }, _this.click = function() {
            return _this.handleClick();
        }, _this.handleClick = function(event) {
            var onClick = _this.props.onClick;


            _this.setState({
                isBusy: true
            });

            Promise.resolve(onClick(event)).finally(function() {
                if (_this._isMounted && !_this.props.isBusy) {
                    // if isBusy is explicitly set to true don't override
                    _this.setState({
                        isBusy: false
                    });
                }
            });
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(Button, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this._isMounted = true;
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(newProps) {
            if (newProps.isBusy !== this.props.isBusy) {
                this.setState({
                    isBusy: newProps.isBusy
                });
            }
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this._isMounted = false;
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                type = _props.type,
                size = _props.size,
                label = _props.label,
                className = _props.className,
                disabled = _props.disabled,
                isSubmit = _props.isSubmit;
            var isBusy = this.state.isBusy;

            var cursor = isBusy ? 'wait' : disabled ? 'default' : 'pointer';
            var onClick = disabled ? function() {} : this.handleClick;

            return _react2.default.createElement(
                'button', {
                    type: isSubmit ? 'submit' : 'button',
                    className: _indexModule2.default[type] + ' ' + className + ' ' + _indexModule2.default[size],
                    onClick: onClick,
                    disabled: disabled || isBusy,
                    style: {
                        cursor: cursor
                    }
                },
                label || this.props.children
            );
        }
    }]);

    return Button;
}(_react2.default.Component), _class.displayName = 'ureact-button', _class.propTypes = {
    type: _propTypes2.default.oneOf(['primary', 'secondary', 'nav', 'body', 'default', 'minimal']),
    size: _propTypes2.default.oneOf(['large', 'standard', 'small']),
    onClick: _propTypes2.default.func.isRequired,
    className: _propTypes2.default.string,
    label: _propTypes2.default.string,
    disabled: _propTypes2.default.bool,
    isBusy: _propTypes2.default.bool,
    isSubmit: _propTypes2.default.bool,
    children: _propTypes2.default.node
}, _class.defaultProps = {
    type: 'default',
    size: 'standard',
    label: '',
    className: '',
    children: null,
    disabled: false,
    isBusy: false,
    isSubmit: false
}, _temp2);
exports.default = Button;