'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _createClass = function() {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();

var _dec, _class, _class2, _temp2;
/**
 * Loads a low-scale version of an image first and then replaces with regular size image once it's
 * loaded.
 */

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _noop2 = require('lodash/noop');

var _noop3 = _interopRequireDefault(_noop2);

var _reactCssModules = require('react-css-modules');

var _reactCssModules2 = _interopRequireDefault(_reactCssModules);

var _indexModule = require('./index.module.scss');

var _indexModule2 = _interopRequireDefault(_indexModule);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var LOADING = 'loading';
var LOADED = 'loaded';
var PRE_LOADED = 'pre-loaded';

var TOPHER_THUMBNAIL_SUFFIX = '_thumb_w32_h';
var TOPHER_URL_SUBSTRING = '/topher/';

var ImageLoader = (_dec = (0, _reactCssModules2.default)(_indexModule2.default), _dec(_class = (_temp2 = _class2 = function(_React$Component) {
    _inherits(ImageLoader, _React$Component);

    function ImageLoader() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, ImageLoader);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ImageLoader.__proto__ || Object.getPrototypeOf(ImageLoader)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            status: LOADING
        }, _this.handleImageLoaded = function() {
            _this.setState({
                status: LOADED
            });
            _this.props.onLoad();
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(ImageLoader, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this._initImageLoader(this.props);
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(newProps) {
            if (newProps.src !== this.props.src) {
                this._initImageLoader(newProps);
            }
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this._destroyImageLoader();
        }
    }, {
        key: '_getLowsrc',
        value: function _getLowsrc() {
            var _props = this.props,
                lowsrc = _props.lowsrc,
                src = _props.src;


            if (lowsrc) {
                return lowsrc;
            } else {
                return this._isTopherUrl(src) ? this._getTopherLowsrc(src) : src;
            }
        }
    }, {
        key: '_getTopherLowsrc',
        value: function _getTopherLowsrc(url) {
            var startExtension = url.lastIndexOf('.');
            if (startExtension > -1) {
                return url.slice(0, startExtension) + TOPHER_THUMBNAIL_SUFFIX + url.slice(startExtension);
            } else {
                return url;
            }
        }
    }, {
        key: '_isTopherUrl',
        value: function _isTopherUrl(url) {
            if (!url) {
                return false;
            }

            return url.indexOf(TOPHER_URL_SUBSTRING) > -1;
        }
    }, {
        key: '_initImageLoader',
        value: function _initImageLoader(props) {
            var _this2 = this;

            this.setState({
                status: LOADING
            });
            this._destroyImageLoader();

            var src = props.src,
                onLoad = props.onLoad;


            var lowsrc = this._getLowsrc();

            var thumbImageLoader = new Image();
            thumbImageLoader.onload = thumbImageLoader.onerror = function() {
                return _this2._loadFullImage({
                    src: src,
                    onLoad: onLoad
                });
            };
            thumbImageLoader.src = lowsrc;
        }
    }, {
        key: '_loadFullImage',
        value: function _loadFullImage(_ref2) {
            var src = _ref2.src,
                onLoad = _ref2.onLoad;

            this.fullImageLoader = new Image();
            this.fullImageLoader.src = src;

            if (this.fullImageLoader.complete) {
                this.setState({
                    status: PRE_LOADED
                });
                onLoad();
            } else {
                this.fullImageLoader.onload = this.handleImageLoaded;
            }
        }
    }, {
        key: '_destroyImageLoader',
        value: function _destroyImageLoader() {
            if (this.fullImageLoader) {
                this.fullImageLoader.onload = null;
                this.fullImageLoader = null;
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _props2 = this.props,
                src = _props2.src,
                className = _props2.className,
                width = _props2.width,
                height = _props2.height,
                onClick = _props2.onClick,
                children = _props2.children;
            var status = this.state.status;


            var lowsrc = this._getLowsrc();

            return _react2.default.createElement(
                'div', {
                    onClick: onClick,
                    styleName: status,
                    className: className,
                    style: {
                        width: width,
                        height: height
                    }
                },
                _react2.default.createElement('div', {
                    styleName: 'thumb',
                    style: {
                        backgroundImage: 'url(\'' + lowsrc + '\')'
                    }
                }),
                _react2.default.createElement('div', {
                    styleName: 'full',
                    style: {
                        backgroundImage: 'url(\'' + src + '\')'
                    }
                }),
                children
            );
        }
    }]);

    return ImageLoader;
}(_react2.default.Component), _class2.displayName = 'ureact-image-loader', _class2.propTypes = {
    src: _propTypes2.default.string.isRequired /* url to full-scale image */ ,
    lowsrc: _propTypes2.default.string /* url to low-scale image */ ,
    width: _propTypes2.default.string /* width of image (required to be set here, or via className) */ ,
    height: _propTypes2.default.string /* height of image (required to be set here, or via className) */ ,
    className: _propTypes2.default.string,
    onLoad: _propTypes2.default.func,
    onClick: _propTypes2.default.func,
    children: _propTypes2.default.node
}, _class2.defaultProps = {
    className: null,
    onLoad: _noop3.default,
    onClick: _noop3.default,
    children: null
}, _temp2)) || _class);
exports.default = ImageLoader;