'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _createClass = function() {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _find2 = require('lodash/find');

var _find3 = _interopRequireDefault(_find2);

var _assets = require('./assets');

var _assets2 = _interopRequireDefault(_assets);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var Logo = (_temp = _class = function(_React$Component) {
    _inherits(Logo, _React$Component);

    function Logo() {
        _classCallCheck(this, Logo);

        return _possibleConstructorReturn(this, (Logo.__proto__ || Object.getPrototypeOf(Logo)).apply(this, arguments));
    }

    _createClass(Logo, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                className = _props.className,
                companyKey = _props.companyKey,
                theme = _props.theme;

            var logo = (0, _find3.default)(_assets2.default, {
                companyKey: companyKey
            });

            return logo ? _react2.default.createElement('img', {
                className: className,
                src: theme === 'dark' ? logo.white : logo.color,
                alt: logo.name,
                title: logo.name
            }) : null;
        }
    }]);

    return Logo;
}(_react2.default.Component), _class.displayName = 'common/logo', _class.propTypes = {
    className: _propTypes2.default.string,
    companyKey: _propTypes2.default.oneOf((0, _map3.default)(_assets2.default, 'companyKey')),
    theme: _propTypes2.default.oneOf(['light', 'dark'])
}, _class.options = (0, _map3.default)(_assets2.default, function(logo) {
    return {
        label: logo.name,
        value: logo.companyKey
    };
}), _temp);
exports.default = Logo;