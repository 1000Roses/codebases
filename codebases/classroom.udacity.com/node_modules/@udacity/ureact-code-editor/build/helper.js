var _slicedToArray = function() {
    function sliceIterator(arr, i) {
        var _arr = [];
        var _n = true;
        var _d = false;
        var _e = undefined;
        try {
            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                _arr.push(_s.value);
                if (i && _arr.length === i) break;
            }
        } catch (err) {
            _d = true;
            _e = err;
        } finally {
            try {
                if (!_n && _i["return"]) _i["return"]();
            } finally {
                if (_d) throw _e;
            }
        }
        return _arr;
    }
    return function(arr, i) {
        if (Array.isArray(arr)) {
            return arr;
        } else if (Symbol.iterator in Object(arr)) {
            return sliceIterator(arr, i);
        } else {
            throw new TypeError("Invalid attempt to destructure non-iterable instance");
        }
    };
}();

var Helper = {
    default: 'txt',
    modes: {
        js: 'javascript',
        html: 'html',
        java: 'java',
        py: 'python',
        xml: 'xml',
        md: 'markdown',
        css: 'css',
        json: 'json',
        c: 'c_cpp',
        cc: 'c_cpp',
        cpp: 'c_cpp',
        h: 'c_cpp',
        hpp: 'c_cpp',
        m: 'objectivec',
        swift: 'swift',
        txt: 'text',
        sql: 'sql',
        r: 'r',
        rb: 'ruby'
    },

    getExtension: function getExtension(filename) {
        var _filename$split = filename.split('.'),
            _filename$split2 = _slicedToArray(_filename$split, 2),
            _filename$split2$ = _filename$split2[1],
            ext = _filename$split2$ === undefined ? Helper.default : _filename$split2$;

        return ext.toLowerCase();
    },
    getMode: function getMode(filename) {
        var ext = filename ? Helper.getExtension(filename) : '';
        return Helper.modes[ext] || 'text';
    },
    generateRandomId: function generateRandomId() {
        return 'ureact-code-editor-' + Math.random().toString(36).slice(-8);
    }
};

export default Helper;