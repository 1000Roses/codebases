var _createClass = function() {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();

var _dec, _class, _class2, _temp2;

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

import React from 'react';
import PropTypes from 'prop-types';
import cssModule from 'react-css-modules';
import styles from './files-selector.scss';

var FileSelector = (_dec = cssModule(styles), _dec(_class = (_temp2 = _class2 = function(_React$Component) {
    _inherits(FileSelector, _React$Component);

    function FileSelector() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, FileSelector);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = FileSelector.__proto__ || Object.getPrototypeOf(FileSelector)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            addingFile: false,
            renamingFile: ''
        }, _this.handleCancelFilename = function(e) {
            var _this$state = _this.state,
                renamingFile = _this$state.renamingFile,
                addingFile = _this$state.addingFile;


            if (renamingFile || addingFile) {
                if (e.keyCode === 27) {
                    _this.setState({
                        renamingFile: '',
                        addingFile: false
                    });
                }
            }
        }, _this.handleAddingFile = function(e) {
            e.preventDefault();
            _this.setState({
                renamingFile: '',
                addingFile: true
            });
        }, _this.addFile = function(e) {
            var onAdd = _this.props.onAdd;

            var newFilename = _this.refs.filename.value;

            e.preventDefault();

            if (newFilename) {
                onAdd(newFilename);
                _this.refs.filename.value = '';
                _this.setState({
                    addingFile: false
                });
            }
        }, _this.handleRenamingFile = function(e, idx) {
            e.preventDefault();
            _this.setState({
                renamingFile: idx + '',
                addingFile: false
            });
        }, _this.renamingFile = function(e) {
            e.preventDefault();
            var onRename = _this.props.onRename;

            var idx = _this.state.renamingFile;
            var renameFilename = _this.refs.filename.value;

            if (renameFilename) {
                onRename(idx, renameFilename);
                _this.refs.filename.value = '';
                _this.setState({
                    renamingFile: ''
                });
            }
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(FileSelector, [{
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                files = _props.files,
                onSelect = _props.onSelect,
                selectedFile = _props.selectedFile,
                onDelete = _props.onDelete,
                onAdd = _props.onAdd;
            var _state = this.state,
                addingFile = _state.addingFile,
                renamingFile = _state.renamingFile;

            var selectedName = files[selectedFile] ? files[selectedFile].name : '';

            return React.createElement(
                'div', {
                    styleName: 'files-selector',
                    onKeyUp: this.handleCancelFilename
                },
                React.createElement(
                    'h5', {
                        id: 'file-select-description',
                        'aria-live': 'assertive'
                    },
                    selectedName,
                    ' Currently Selected'
                ),
                onAdd ? React.createElement(
                    'div', {
                        styleName: 'add-file'
                    },
                    addingFile || renamingFile ? React.createElement(
                        'form', {
                            method: 'post',
                            action: '#',
                            onSubmit: addingFile ? this.addFile : this.renamingFile
                        },
                        React.createElement(
                            'label', {
                                htmlFor: 'filename'
                            },
                            'Filename:'
                        ),
                        ' ',
                        React.createElement('input', {
                            id: 'filename',
                            ref: 'filename',
                            type: 'text',
                            placeholder: 'yourfile.js',
                            onBlur: addingFile ? this.addFile : this.renamingFile,
                            defaultValue: renamingFile ? files[renamingFile].name : null
                        })
                    ) : React.createElement(
                        'a', {
                            href: '#',
                            onClick: this.handleAddingFile,
                            title: 'Add File'
                        },
                        React.createElement(
                            'span',
                            null,
                            'Add File'
                        )
                    )
                ) : null,
                React.createElement(
                    'ul', {
                        'aria-describedby': 'file-select-description'
                    },
                    _.map(files, function(file, idx) {
                        return React.createElement(
                            'li', {
                                key: idx,
                                styleName: selectedFile === idx ? 'file-selected' : 'file-tab',
                                role: 'tab',
                                'aria-selected': selectedFile === idx ? true : false
                            },
                            React.createElement(
                                'a', {
                                    href: '#',
                                    onClick: function onClick(e) {
                                        return onSelect(e, idx);
                                    },
                                    onDoubleClick: function onDoubleClick(e) {
                                        return _this2.handleRenamingFile(e, idx);
                                    }
                                },
                                file.name,
                                selectedFile === idx ? React.createElement(
                                    'span',
                                    null,
                                    'Currently Selected'
                                ) : null
                            ),
                            ' ',
                            onDelete ? React.createElement(
                                'a', {
                                    href: '#',
                                    onClick: function onClick(e) {
                                        return onDelete(e, file);
                                    },
                                    title: 'Delete File',
                                    styleName: 'delete'
                                },
                                React.createElement(
                                    'span',
                                    null,
                                    'Delete File'
                                )
                            ) : null
                        );
                    })
                )
            );
        }
    }]);

    return FileSelector;
}(React.Component), _class2.displayName = 'ureact-code-editor.files-selector', _class2.propTypes = {
    files: PropTypes.array,
    onSelect: PropTypes.func,
    selectedFile: PropTypes.number,
    onRename: PropTypes.func,
    onDelete: PropTypes.func,
    onAdd: PropTypes.func
}, _class2.defaultProps = {
    files: [],
    onSelect: _.noop,
    selectedFile: 0,
    onRename: _.noop,
    onDelete: false,
    onAdd: false
}, _temp2)) || _class);
export {
    FileSelector as
    default
};