var _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
            }
        }
    }
    return target;
};

var _createClass = function() {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();

var _dec, _class, _class2, _temp2;

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

import React from 'react';
import PropTypes from 'prop-types';
import Helper from './helper';
import cssModule from 'react-css-modules';
import styles from './code-editor.scss';

var CodeEditor = (_dec = cssModule(styles), _dec(_class = (_temp2 = _class2 = function(_React$Component) {
    _inherits(CodeEditor, _React$Component);

    function CodeEditor() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, CodeEditor);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = CodeEditor.__proto__ || Object.getPrototypeOf(CodeEditor)).call.apply(_ref, [this].concat(args))), _this), _this.handleA11yFileChange = function(evt) {
            _this.handleFileChange(evt.target.value);
        }, _this.handleFileChange = function(newValue) {
            var handleFileChange = _this.props.handleFileChange;


            handleFileChange(newValue);
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(CodeEditor, [{
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                id = _props.id,
                file = _props.file,
                name = _props.name,
                readOnly = _props.readOnly,
                AceEditor = _props.AceEditor,
                ace = _props.ace;

            var fileName = file ? file.name : '';
            var fileText = file ? file.text : '';

            return React.createElement(
                'div',
                null,
                React.createElement('textarea', {
                    onChange: this.handleA11yFileChange,
                    styleName: 'a11yEditor',
                    title: 'Simplified code editor',
                    value: fileText,
                    ref: function ref(c) {
                        _this2.a11yEditor = c;
                    }
                }),
                React.createElement(
                    'div', {
                        'aria-hidden': true,
                        role: 'presentation',
                        tabIndex: '-1',
                        'aria-label': 'Advanced code editor.  Click ESC to revert to the simplified editor.'
                    },
                    React.createElement(AceEditor, _extends({
                        ref: function ref(c) {
                            _this2.aceEditor = c;
                        },
                        value: fileText,
                        onChange: this.handleFileChange,
                        onLoad: function onLoad(editor) {
                            editor.gotoLine(0, 0);
                        },
                        mode: Helper.getMode(fileName),
                        theme: 'textmate',
                        width: '100%',
                        fontSize: 14,
                        name: id || name,
                        showPrintMargin: false,
                        readOnly: readOnly,
                        commands: [{
                            exec: function exec() {
                                _this2.a11yEditor.focus();
                            },
                            bindKey: {
                                mac: 'Esc',
                                win: 'Esc'
                            }
                        }]
                    }, ace || {}))
                )
            );
        }
    }]);

    return CodeEditor;
}(React.Component), _class2.displayName = 'code-editor', _class2.propTypes = {
    file: PropTypes.shape({
        text: PropTypes.string.isRequired,
        name: PropTypes.name
    }),
    handleFileChange: PropTypes.func,
    id: PropTypes.string,
    name: PropTypes.string.isRequired,
    readOnly: PropTypes.bool,
    ace: PropTypes.object,
    AceEditor: PropTypes.func.isRequired
}, _class2.defaultProps = {
    file: {},
    handleFileChange: _.noop,
    id: null,
    readOnly: false
}, _temp2)) || _class);
export {
    CodeEditor as
    default
};