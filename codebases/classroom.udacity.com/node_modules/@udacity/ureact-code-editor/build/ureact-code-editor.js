var _createClass = function() {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();

var _dec, _class, _class2, _temp2;

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

import React from 'react';
import PropTypes from 'prop-types';
import Helper from './helper';
import LoadingWrapper from '@udacity/ureact-components/dist/loading-wrapper';
import FilesSelector from './files-selector';
import CodeEditor from './code-editor';
import cssModule from 'react-css-modules';
import styles from './ureact-code-editor.scss';

var UreactCodeEditor = (_dec = cssModule(styles), _dec(_class = (_temp2 = _class2 = function(_React$Component) {
    _inherits(UreactCodeEditor, _React$Component);

    function UreactCodeEditor() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, UreactCodeEditor);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = UreactCodeEditor.__proto__ || Object.getPrototypeOf(UreactCodeEditor)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            selectedFile: 0,
            isLoading: true,
            files: _this.props.files || {},
            name: Helper.generateRandomId()
        }, _this._updateData = function(files) {
            var updateFiles = [];

            _.each(files, function(file, idx) {
                updateFiles.push(files[_.findIndex(files, {
                    name: file.name
                })] || file);
            });

            _this.setState({
                files: updateFiles
            });
        }, _this.handleFileSelect = function(e, selectedFile) {
            e.preventDefault();

            _this.setState({
                selectedFile: selectedFile
            });
        }, _this.handleFileAdd = function(newFilename) {
            var files = _this.state.files;


            if (newFilename) {
                files.push({
                    text: '',
                    name: newFilename
                });
                _this.setState({
                    files: files
                });
                _this.props.onChange(files);
            }
        }, _this.handleFileRename = function(idx, newFilename) {
            var files = _this.state.files;


            if (newFilename && files[idx]) {
                files[idx].name = newFilename;
                _this.setState({
                    files: files
                });
                _this.props.onChange(files);
            }
        }, _this.handleFileDelete = function(e, deletedFile) {
            e.preventDefault();
            e.stopPropagation();

            var _this$state = _this.state,
                files = _this$state.files,
                selectedFile = _this$state.selectedFile;

            var idx = _.findIndex(files, deletedFile);
            var editedFiles = _.clone(files);

            if (window.confirm('Do you really want to delete ' + deletedFile.name + '?')) {
                editedFiles.splice(idx, 1);

                // If you're deleting the current tab, select the first tab.
                if (selectedFile === idx) {
                    _this.setState({
                        selectedFile: 0
                    });
                }
                _this.setState({
                    files: editedFiles
                });
                _this.props.onChange(editedFiles);
            }
        }, _this.handleFileChange = function(newValue) {
            var _this$state2 = _this.state,
                selectedFile = _this$state2.selectedFile,
                files = _this$state2.files;

            var updatedFiles = files;

            if (updatedFiles[selectedFile]) {
                updatedFiles[selectedFile].text = newValue;
                _this.setState({
                    updatedFiles: updatedFiles
                });
                _this.props.onChange(updatedFiles);
            }
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(UreactCodeEditor, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            var _this2 = this;

            var files = this.props.files;

            this._updateData(files);

            this.props.onChange(this.state.files);

            require.ensure([], function(require) {
                _this2.AceEditor = require('react-ace').default;

                require('brace/theme/textmate');
                require('brace/mode/javascript');
                require('brace/mode/html');
                require('brace/mode/java');
                require('brace/mode/python');
                require('brace/mode/xml');
                require('brace/mode/markdown');
                require('brace/mode/css');
                require('brace/mode/json');
                require('brace/mode/c_cpp');
                require('brace/mode/objectivec');
                require('brace/mode/swift');
                require('brace/mode/r');
                require('brace/mode/sql');
                require('brace/mode/text');

                _this2.setState({
                    isLoading: false
                });
            }, 'ureact-code-editor');
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var files = nextProps.files;


            this._updateData(files);
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                id = _props.id,
                canDelete = _props.canDelete,
                canAdd = _props.canAdd,
                readOnly = _props.readOnly,
                onChange = _props.onChange,
                ace = _props.ace;
            var _state = this.state,
                files = _state.files,
                selectedFile = _state.selectedFile,
                isLoading = _state.isLoading,
                name = _state.name;

            var handleFileDelete = canDelete ? this.handleFileDelete : null;
            var handleFileAdd = canAdd ? this.handleFileAdd : null;
            var handleFileRename = canAdd ? this.handleFileRename : null;
            var fileName = files[selectedFile] ? files[selectedFile].name : '';
            var fileText = files[selectedFile] ? files[selectedFile].text : '';
            var filesSelector = null;

            if (isLoading) {
                return React.createElement(LoadingWrapper, null);
            }

            if (files.length > 1 || handleFileDelete || handleFileAdd) {
                filesSelector = React.createElement(FilesSelector, {
                    files: files,
                    container: this,
                    selectedFile: selectedFile,
                    onSelect: this.handleFileSelect,
                    onDelete: handleFileDelete,
                    onAdd: handleFileAdd,
                    onRename: handleFileRename
                });
            }

            return React.createElement(
                'div', {
                    styleName: 'code-editor'
                },
                filesSelector,
                React.createElement(
                    'div', {
                        styleName: 'editor'
                    },
                    fileName ? React.createElement(CodeEditor, {
                        file: files[selectedFile],
                        handleFileChange: this.handleFileChange,
                        name: name,
                        id: id,
                        onChange: onChange,
                        readOnly: readOnly,
                        ace: ace,
                        AceEditor: this.AceEditor
                    }) : React.createElement(
                        'p',
                        null,
                        'Get started by adding a new file'
                    )
                )
            );
        }
    }]);

    return UreactCodeEditor;
}(React.Component), _class2.displayName = 'ureact-code-editor', _class2.propTypes = {
    files: PropTypes.arrayOf(PropTypes.shape({
        text: PropTypes.string.isRequired,
        name: PropTypes.name
    })),
    onChange: PropTypes.func,
    id: PropTypes.string,
    canDelete: PropTypes.bool,
    canAdd: PropTypes.bool,
    readOnly: PropTypes.bool,
    ace: PropTypes.object
}, _class2.defaultProps = {
    files: [],
    onChange: _.noop,
    canDelete: false,
    canAdd: false,
    readOnly: false
}, _temp2)) || _class);
export {
    UreactCodeEditor as
    default
};