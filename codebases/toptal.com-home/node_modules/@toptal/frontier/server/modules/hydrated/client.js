import React from 'react'
import ReactDOM from 'react-dom'

import {
    deserialize
} from './process-payload'
import {
    whenVisible,
    whenVisibleSupported,
    scheduleForIdle
} from './defer-invocation'

const componentPlaceholderSelector = hydrationId =>
    `div[data-cid="${hydrationId}"]`

/**
 * Hydrates Component on the client with respect to:
 *
 * - defer - when it becomes visible
 * - atIdle - preferably at the next CPU idle
 *
 * Note that even with defer it hydrates all component instances
 * when the first one becomes visible (for simplicity).
 *
 * TODO:
 * - tackle hydrated in another hydrated component issue
 *
 * @param {object} options
 * @param {React.Component} options.Component
 * @param {boolean} options.defer
 * @param {boolean} options.atIdle
 * @param {string} hydrationId
 */
function hydrate({
    defer,
    ...rest
}, hydrationId) {
    const markers = document.querySelectorAll(`script[data-hid="${hydrationId}"]`)
    const clientOptions = {
        markers,
        ...rest
    }

    // TODO: check if such a situation is correct
    // PageTemplate/partially-hydrated - HydratedDevUtils
    if (!markers.length) {
        return
    }

    if (defer && whenVisibleSupported()) {
        const componentElement = document.querySelector(
            componentPlaceholderSelector(hydrationId)
        )
        return whenVisible(componentElement, () => checkAtIdle(clientOptions))
    }

    return checkAtIdle(clientOptions)
}

/**
 * Hydrates ALL Component instances either through scheduling
 * for the next CPU idle or immediately depending on the atIdle flag.
 *
 * TODO:
 * - prevent passing elements through props
 *
 * @param {object} options
 * @param {boolean} options.atIdle
 * @param {HTMLCollection} options.markers
 * @param {React.Component} options.Component
 */
function checkAtIdle({
    atIdle,
    markers,
    Component
}) {
    const hydrateInstances = () => {
        const hydrationId = markers[0].dataset.hid
        const componentsElement = document.querySelectorAll(
            componentPlaceholderSelector(hydrationId)
        )
        markers.forEach((marker, index) => {
                const props = deserialize(marker.text)
                ReactDOM.hydrate( < Component { ...props
                    }
                    />, componentsElement[index])
                })
        }

        if (atIdle) {
            return scheduleForIdle(hydrateInstances)
        }

        hydrateInstances()
    }

    export {
        hydrate
    }