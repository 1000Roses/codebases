import React, {
    useState,
    useEffect,
    useContext
} from 'react';

var FocusVisibleContext = React.createContext({
    hadKeyboardEvent: true,
    isInitialized: false
});

function FocusVisibleManager(props) {
    var _useState = useState(true),
        hadKeyboardEvent = _useState[0],
        setHadKeyboardEvent = _useState[1];

    useEffect(function() {
        function onPointerDown() {
            setHadKeyboardEvent(false);
        }

        function onInitialPointerMove(e) {
            var _target$nodeName;

            var target = e === null || e === void 0 ? void 0 : e.target;

            if ((target === null || target === void 0 ? void 0 : (_target$nodeName = target.nodeName) === null || _target$nodeName === void 0 ? void 0 : _target$nodeName.toLowerCase()) === "html") {
                return;
            }

            setHadKeyboardEvent(false);
            removeInitialPointerMoveListeners();
        }

        function addInitialPointerMoveListeners() {
            document.addEventListener("mousemove", onInitialPointerMove);
            document.addEventListener("mousedown", onInitialPointerMove);
            document.addEventListener("mouseup", onInitialPointerMove);
            document.addEventListener("pointermove", onInitialPointerMove);
            document.addEventListener("pointerdown", onInitialPointerMove);
            document.addEventListener("pointerup", onInitialPointerMove);
            document.addEventListener("touchmove", onInitialPointerMove);
            document.addEventListener("touchstart", onInitialPointerMove);
            document.addEventListener("touchend", onInitialPointerMove);
        }

        function removeInitialPointerMoveListeners() {
            document.removeEventListener("mousemove", onInitialPointerMove);
            document.removeEventListener("mousedown", onInitialPointerMove);
            document.removeEventListener("mouseup", onInitialPointerMove);
            document.removeEventListener("pointermove", onInitialPointerMove);
            document.removeEventListener("pointerdown", onInitialPointerMove);
            document.removeEventListener("pointerup", onInitialPointerMove);
            document.removeEventListener("touchmove", onInitialPointerMove);
            document.removeEventListener("touchstart", onInitialPointerMove);
            document.removeEventListener("touchend", onInitialPointerMove);
        }

        function onKeyDown(e) {
            if (e.metaKey || e.altKey || e.ctrlKey) {
                return;
            }

            setHadKeyboardEvent(true);
        }

        function onVisibilityChange(_e) {
            if (document.visibilityState === "hidden") {
                setHadKeyboardEvent(true);
                addInitialPointerMoveListeners();
            }
        }

        document.addEventListener("keydown", onKeyDown, true);
        document.addEventListener("mousedown", onPointerDown, true);
        document.addEventListener("pointerdown", onPointerDown, true);
        document.addEventListener("touchstart", onPointerDown, true);
        document.addEventListener("visibilitychange", onVisibilityChange, true);
        addInitialPointerMoveListeners();
        return function() {
            document.removeEventListener("keydown", onKeyDown, true);
            document.removeEventListener("mousedown", onPointerDown, true);
            document.removeEventListener("pointerdown", onPointerDown, true);
            document.removeEventListener("touchstart", onPointerDown, true);
            document.removeEventListener("visibilitychange", onVisibilityChange, true);
            removeInitialPointerMoveListeners();
        };
    }, [setHadKeyboardEvent]);
    return React.createElement(FocusVisibleContext.Provider, {
        value: {
            hadKeyboardEvent: hadKeyboardEvent,
            isInitialized: true
        }
    }, props.children);
}

function useFocusVisible() {
    var _useState = useState(false),
        isFocused = _useState[0],
        setIsFocused = _useState[1];

    var _useContext = useContext(FocusVisibleContext),
        hadKeyboardEvent = _useContext.hadKeyboardEvent,
        isInitialized = _useContext.isInitialized;

    function onFocus() {
        setIsFocused(true);
    }

    function onBlur() {
        setIsFocused(false);
    }

    var focusVisible;

    if (isInitialized) {
        focusVisible = hadKeyboardEvent && isFocused;
    } else {
        focusVisible = isFocused;
    }

    return {
        focusVisible: focusVisible,
        onFocus: onFocus,
        onBlur: onBlur
    };
}

export {
    FocusVisibleManager,
    useFocusVisible
};
//# sourceMappingURL=index.modern.js.map